#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class UserProfile:
  """
  Attributes:
   - update_time
   - kw_map
   - tag_map
   - topic_map
   - account_map
   - title_map
   - other_map
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'update_time', None, None, ), # 1
    (2, TType.MAP, 'kw_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 2
    (3, TType.MAP, 'tag_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 3
    (4, TType.MAP, 'topic_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 4
    (5, TType.MAP, 'account_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 5
    (6, TType.MAP, 'title_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 6
    (7, TType.MAP, 'other_map', (TType.STRING,None,TType.DOUBLE,None), None, ), # 7
  )

  def __init__(self, update_time=None, kw_map=None, tag_map=None, topic_map=None, account_map=None, title_map=None, other_map=None,):
    self.update_time = update_time
    self.kw_map = kw_map
    self.tag_map = tag_map
    self.topic_map = topic_map
    self.account_map = account_map
    self.title_map = title_map
    self.other_map = other_map

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.kw_map = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readDouble();
            self.kw_map[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.tag_map = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin() 
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = iprot.readDouble();
            self.tag_map[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.topic_map = {}
          (_ktype15, _vtype16, _size14 ) = iprot.readMapBegin() 
          for _i18 in xrange(_size14):
            _key19 = iprot.readString();
            _val20 = iprot.readDouble();
            self.topic_map[_key19] = _val20
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.account_map = {}
          (_ktype22, _vtype23, _size21 ) = iprot.readMapBegin() 
          for _i25 in xrange(_size21):
            _key26 = iprot.readString();
            _val27 = iprot.readDouble();
            self.account_map[_key26] = _val27
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.title_map = {}
          (_ktype29, _vtype30, _size28 ) = iprot.readMapBegin() 
          for _i32 in xrange(_size28):
            _key33 = iprot.readString();
            _val34 = iprot.readDouble();
            self.title_map[_key33] = _val34
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.other_map = {}
          (_ktype36, _vtype37, _size35 ) = iprot.readMapBegin() 
          for _i39 in xrange(_size35):
            _key40 = iprot.readString();
            _val41 = iprot.readDouble();
            self.other_map[_key40] = _val41
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfile')
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I64, 1)
      oprot.writeI64(self.update_time)
      oprot.writeFieldEnd()
    if self.kw_map is not None:
      oprot.writeFieldBegin('kw_map', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.kw_map))
      for kiter42,viter43 in self.kw_map.items():
        oprot.writeString(kiter42)
        oprot.writeDouble(viter43)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.tag_map is not None:
      oprot.writeFieldBegin('tag_map', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.tag_map))
      for kiter44,viter45 in self.tag_map.items():
        oprot.writeString(kiter44)
        oprot.writeDouble(viter45)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.topic_map is not None:
      oprot.writeFieldBegin('topic_map', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.topic_map))
      for kiter46,viter47 in self.topic_map.items():
        oprot.writeString(kiter46)
        oprot.writeDouble(viter47)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.account_map is not None:
      oprot.writeFieldBegin('account_map', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.account_map))
      for kiter48,viter49 in self.account_map.items():
        oprot.writeString(kiter48)
        oprot.writeDouble(viter49)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.title_map is not None:
      oprot.writeFieldBegin('title_map', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.title_map))
      for kiter50,viter51 in self.title_map.items():
        oprot.writeString(kiter50)
        oprot.writeDouble(viter51)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.other_map is not None:
      oprot.writeFieldBegin('other_map', TType.MAP, 7)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.other_map))
      for kiter52,viter53 in self.other_map.items():
        oprot.writeString(kiter52)
        oprot.writeDouble(viter53)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class LongTermUserProfile:
  """
  Attributes:
   - mid
   - update_time
   - pos_info
   - neg_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'mid', None, None, ), # 1
    (2, TType.I64, 'update_time', None, None, ), # 2
    (3, TType.STRUCT, 'pos_info', (UserProfile, UserProfile.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'neg_info', (UserProfile, UserProfile.thrift_spec), None, ), # 4
  )

  def __init__(self, mid=None, update_time=None, pos_info=None, neg_info=None,):
    self.mid = mid
    self.update_time = update_time
    self.pos_info = pos_info
    self.neg_info = neg_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.mid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.update_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pos_info = UserProfile()
          self.pos_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.neg_info = UserProfile()
          self.neg_info.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LongTermUserProfile')
    if self.mid is not None:
      oprot.writeFieldBegin('mid', TType.STRING, 1)
      oprot.writeString(self.mid)
      oprot.writeFieldEnd()
    if self.update_time is not None:
      oprot.writeFieldBegin('update_time', TType.I64, 2)
      oprot.writeI64(self.update_time)
      oprot.writeFieldEnd()
    if self.pos_info is not None:
      oprot.writeFieldBegin('pos_info', TType.STRUCT, 3)
      self.pos_info.write(oprot)
      oprot.writeFieldEnd()
    if self.neg_info is not None:
      oprot.writeFieldBegin('neg_info', TType.STRUCT, 4)
      self.neg_info.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.mid is None:
      raise TProtocol.TProtocolException(message='Required field mid is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HotFeature:
  """
  Attributes:
   - op_time
   - weixin_read_num
   - app_read_num
   - app_show_num
   - app_read_duration
   - app_favor_num
   - app_collect_num
   - app_share_num
   - news_sogourank_pv
   - news_comment_num
   - news_participant_num
   - sogou_search_index
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'op_time', None, 0, ), # 1
    (2, TType.I32, 'weixin_read_num', None, 0, ), # 2
    (3, TType.I32, 'app_read_num', None, 0, ), # 3
    (4, TType.I32, 'app_show_num', None, 0, ), # 4
    (5, TType.I32, 'app_read_duration', None, 0, ), # 5
    (6, TType.I32, 'app_favor_num', None, 0, ), # 6
    (7, TType.I32, 'app_collect_num', None, 0, ), # 7
    (8, TType.I32, 'app_share_num', None, 0, ), # 8
    (9, TType.I32, 'news_sogourank_pv', None, 0, ), # 9
    (10, TType.I32, 'news_comment_num', None, 0, ), # 10
    (11, TType.I32, 'news_participant_num', None, 0, ), # 11
    (12, TType.I32, 'sogou_search_index', None, 0, ), # 12
  )

  def __init__(self, op_time=thrift_spec[1][4], weixin_read_num=thrift_spec[2][4], app_read_num=thrift_spec[3][4], app_show_num=thrift_spec[4][4], app_read_duration=thrift_spec[5][4], app_favor_num=thrift_spec[6][4], app_collect_num=thrift_spec[7][4], app_share_num=thrift_spec[8][4], news_sogourank_pv=thrift_spec[9][4], news_comment_num=thrift_spec[10][4], news_participant_num=thrift_spec[11][4], sogou_search_index=thrift_spec[12][4],):
    self.op_time = op_time
    self.weixin_read_num = weixin_read_num
    self.app_read_num = app_read_num
    self.app_show_num = app_show_num
    self.app_read_duration = app_read_duration
    self.app_favor_num = app_favor_num
    self.app_collect_num = app_collect_num
    self.app_share_num = app_share_num
    self.news_sogourank_pv = news_sogourank_pv
    self.news_comment_num = news_comment_num
    self.news_participant_num = news_participant_num
    self.sogou_search_index = sogou_search_index

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.op_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.weixin_read_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.app_read_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.app_show_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.app_read_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.app_favor_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.app_collect_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.app_share_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.news_sogourank_pv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.news_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.news_participant_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.sogou_search_index = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HotFeature')
    if self.op_time is not None:
      oprot.writeFieldBegin('op_time', TType.I32, 1)
      oprot.writeI32(self.op_time)
      oprot.writeFieldEnd()
    if self.weixin_read_num is not None:
      oprot.writeFieldBegin('weixin_read_num', TType.I32, 2)
      oprot.writeI32(self.weixin_read_num)
      oprot.writeFieldEnd()
    if self.app_read_num is not None:
      oprot.writeFieldBegin('app_read_num', TType.I32, 3)
      oprot.writeI32(self.app_read_num)
      oprot.writeFieldEnd()
    if self.app_show_num is not None:
      oprot.writeFieldBegin('app_show_num', TType.I32, 4)
      oprot.writeI32(self.app_show_num)
      oprot.writeFieldEnd()
    if self.app_read_duration is not None:
      oprot.writeFieldBegin('app_read_duration', TType.I32, 5)
      oprot.writeI32(self.app_read_duration)
      oprot.writeFieldEnd()
    if self.app_favor_num is not None:
      oprot.writeFieldBegin('app_favor_num', TType.I32, 6)
      oprot.writeI32(self.app_favor_num)
      oprot.writeFieldEnd()
    if self.app_collect_num is not None:
      oprot.writeFieldBegin('app_collect_num', TType.I32, 7)
      oprot.writeI32(self.app_collect_num)
      oprot.writeFieldEnd()
    if self.app_share_num is not None:
      oprot.writeFieldBegin('app_share_num', TType.I32, 8)
      oprot.writeI32(self.app_share_num)
      oprot.writeFieldEnd()
    if self.news_sogourank_pv is not None:
      oprot.writeFieldBegin('news_sogourank_pv', TType.I32, 9)
      oprot.writeI32(self.news_sogourank_pv)
      oprot.writeFieldEnd()
    if self.news_comment_num is not None:
      oprot.writeFieldBegin('news_comment_num', TType.I32, 10)
      oprot.writeI32(self.news_comment_num)
      oprot.writeFieldEnd()
    if self.news_participant_num is not None:
      oprot.writeFieldBegin('news_participant_num', TType.I32, 11)
      oprot.writeI32(self.news_participant_num)
      oprot.writeFieldEnd()
    if self.sogou_search_index is not None:
      oprot.writeFieldBegin('sogou_search_index', TType.I32, 12)
      oprot.writeI32(self.sogou_search_index)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
